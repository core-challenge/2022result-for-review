c model ISR_TJ
c  /home/toda/src/NuSMV-2.6.0-Linux_untouched/binary/bin/NuSMV -bmc -bmc_length 20 -n 0 /home/toda/2022solver/bin/../tmp/queen6_6_02.smv > queen6_6_02.log
c ECC Heuristic Algorithm by Alessio Conte, Roberto Grossi and Andrea Marino. University of Pisa.
c This code is compiled using Java 1.8
c Parsing: 36
c Reading graph from file..
c Removing duplicates.................
c Done.
c Algotithm object created, class=it.unipi.di.clq.eps.lists.EPSc
c Edges: 290
c 0 cliques
c 2 cliques
c 4 cliques
c 8 cliques
c 16 cliques
c 32 cliques
c The solution is correct.
c Cliques: 40
c Sum: 182
c MaxSize: 0
c Time: 17
c Aborted: false
c ML = 35
c SIZE = 36
c Removed 0 cliques to minimalize solution.
c Result saved!
c Clique size distribution: {[2,2][3,8][4,8][5,10][6,12]}
c NODE covering index distribution:{[3,1][4,10][5,16][6,5][7,3][8,1]}
c EDGE covering index distrubution:{[1,229][2,58][3,3]}
c Total edges:290
c Distributions saved!
c *** This is NuSMV 2.6.0 (compiled on Wed Oct 14 15:36:56 2015)
c *** Enabled addons are: compass
c *** For more information on NuSMV see <http://nusmv.fbk.eu>
c *** or email to <nusmv-users@list.fbk.eu>.
c *** Please report bugs to <Please report bugs to <nusmv-users@fbk.eu>>
c 
c *** Copyright (c) 2010-2014, Fondazione Bruno Kessler
c 
c *** This version of NuSMV is linked to the CUDD library version 2.4.1
c *** Copyright (c) 1995-2004, Regents of the University of Colorado
c 
c *** This version of NuSMV is linked to the MiniSat SAT solver. 
c *** See http://minisat.se/MiniSat.html
c *** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
c *** Copyright (c) 2007-2010, Niklas Sorensson
c 
c -- no counterexample found with bound 0
c -- no counterexample found with bound 1
c -- no counterexample found with bound 2
c -- no counterexample found with bound 3
c -- no counterexample found with bound 4
c -- no counterexample found with bound 5
c -- no counterexample found with bound 6
c -- no counterexample found with bound 7
c -- no counterexample found with bound 8
c -- no counterexample found with bound 9
c -- specification  G (((((state.token[1] = v3 & state.token[2] = v12) & state.token[3] = v23) & state.token[4] = v25) & state.token[5] = v34) ->  G !((((((((state.token[1] = v5 | state.token[1] = v8) | state.token[1] = v16) | state.token[1] = v24) | state.token[1] = v33) & ((((state.token[2] = v5 | state.token[2] = v8) | state.token[2] = v16) | state.token[2] = v24) | state.token[2] = v33)) & ((((state.token[3] = v5 | state.token[3] = v8) | state.token[3] = v16) | state.token[3] = v24) | state.token[3] = v33)) & ((((state.token[4] = v5 | state.token[4] = v8) | state.token[4] = v16) | state.token[4] = v24) | state.token[4] = v33)) & ((((state.token[5] = v5 | state.token[5] = v8) | state.token[5] = v16) | state.token[5] = v24) | state.token[5] = v33)))    is false
c -- as demonstrated by the following execution sequence
c Trace Description: BMC Counterexample 
c Trace Type: Counterexample 
c   -> State: 1.1 <-
c     state.token[1] = 0ud40_292058302466
c     state.token[2] = 0ud40_31457536
c     state.token[3] = 0ud40_71001182752
c     state.token[4] = 0ud40_34930229248
c     state.token[5] = 0ud40_137774514177
c     state.tid = 1
c     state.vid = 14
c     state.target = 0ud40_0
c     v36 = 0ud40_272646160
c     v35 = 0ud40_2551185472
c     v34 = 0ud40_137774514177
c     v33 = 0ud40_2415922208
c     v32 = 0ud40_8858435840
c     v31 = 0ud40_38923141120
c     v30 = 0ud40_557846592
c     v29 = 0ud40_671105040
c     v28 = 0ud40_2752512032
c     v27 = 0ud40_554502145
c     v26 = 0ud40_13421773824
c     v25 = 0ud40_34930229248
c     v24 = 0ud40_154623033984
c     v23 = 0ud40_71001182752
c     v22 = 0ud40_206225826064
c     v21 = 0ud40_573378396160
c     v20 = 0ud40_146062705156
c     v19 = 0ud40_584115561984
c     v18 = 0ud40_1078067232
c     v17 = 0ud40_69936349568
c     v16 = 0ud40_74155298816
c     v15 = 0ud40_1108084752
c     v14 = 0ud40_559420538888
c     v13 = 0ud40_35434004485
c     v12 = 0ud40_31457536
c     v11 = 0ud40_4439801856
c     v10 = 0ud40_137550102530
c     v9 = 0ud40_549774727176
c     v8 = 0ud40_8592031766
c     v7 = 0ud40_584118730752
c     v6 = 0ud40_296356937728
c     v5 = 0ud40_275054067712
c     v4 = 0ud40_274945155080
c     v3 = 0ud40_292058302466
c     v2 = 0ud40_283467878400
c     v1 = 0ud40_309237653520
c     v0 = 0ud40_0
c   -> State: 1.2 <-
c     state.tid = 2
c     state.vid = 6
c     state.target = 0ud40_559420538888
c   -> State: 1.3 <-
c     state.token[2] = 0ud40_559420538888
c     state.tid = 1
c     state.vid = 8
c     state.target = 0ud40_296356937728
c   -> State: 1.4 <-
c     state.token[1] = 0ud40_296356937728
c     state.tid = 2
c     state.vid = 17
c     state.target = 0ud40_8592031766
c   -> State: 1.5 <-
c     state.token[2] = 0ud40_8592031766
c     state.tid = 3
c     state.vid = 33
c     state.target = 0ud40_69936349568
c   -> State: 1.6 <-
c     state.token[3] = 0ud40_69936349568
c     state.tid = 5
c     state.vid = 4
c     state.target = 0ud40_2415922208
c   -> State: 1.7 <-
c     state.token[5] = 0ud40_2415922208
c     state.tid = 1
c     state.vid = 24
c     state.target = 0ud40_274945155080
c   -> State: 1.8 <-
c     state.token[1] = 0ud40_274945155080
c     state.tid = 3
c     state.vid = 16
c     state.target = 0ud40_154623033984
c   -> State: 1.9 <-
c     state.token[3] = 0ud40_154623033984
c     state.tid = 1
c     state.vid = 5
c     state.target = 0ud40_74155298816
c   -> State: 1.10 <-
c     state.token[1] = 0ud40_74155298816
c     state.tid = 4
c     state.vid = 4
c     state.target = 0ud40_275054067712
c   -> State: 1.11 <-
c     state.token[4] = 0ud40_275054067712
c     state.tid = 1
c     state.vid = 1
c     state.target = 0ud40_274945155080
s 3 12 23 25 34
t 5 8 16 24 33
a YES
a 3 12 23 25 34
a 3 14 23 25 34
a 6 14 23 25 34
a 6 8 23 25 34
a 6 8 17 25 34
a 6 8 17 25 33
a 4 8 17 25 33
a 4 8 24 25 33
a 8 16 24 25 33
a 5 8 16 24 33
