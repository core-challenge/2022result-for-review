c model ISR_TJ
c  /home/toda/src/NuSMV-2.6.0-Linux_untouched/binary/bin/NuSMV -bmc -bmc_length 20 -n 0 /home/toda/2022solver/bin/../tmp/queen5_5_02.smv > queen5_5_02.log
c ECC Heuristic Algorithm by Alessio Conte, Roberto Grossi and Andrea Marino. University of Pisa.
c This code is compiled using Java 1.8
c Parsing: 25
c Reading graph from file..
c Removing duplicates.................
c Done.
c Algotithm object created, class=it.unipi.di.clq.eps.lists.EPSc
c Edges: 160
c 0 cliques
c 2 cliques
c 4 cliques
c 8 cliques
c 16 cliques
c The solution is correct.
c Cliques: 30
c Sum: 121
c MaxSize: 0
c Time: 15
c Aborted: false
c ML = 24
c SIZE = 25
c Removed 0 cliques to minimalize solution.
c Result saved!
c Clique size distribution: {[2,4][3,4][4,9][5,13]}
c NODE covering index distribution:{[3,1][4,11][5,5][6,7][7,1]}
c EDGE covering index distrubution:{[1,123][2,34][3,3]}
c Total edges:160
c Distributions saved!
c *** This is NuSMV 2.6.0 (compiled on Wed Oct 14 15:36:56 2015)
c *** Enabled addons are: compass
c *** For more information on NuSMV see <http://nusmv.fbk.eu>
c *** or email to <nusmv-users@list.fbk.eu>.
c *** Please report bugs to <Please report bugs to <nusmv-users@fbk.eu>>
c 
c *** Copyright (c) 2010-2014, Fondazione Bruno Kessler
c 
c *** This version of NuSMV is linked to the CUDD library version 2.4.1
c *** Copyright (c) 1995-2004, Regents of the University of Colorado
c 
c *** This version of NuSMV is linked to the MiniSat SAT solver. 
c *** See http://minisat.se/MiniSat.html
c *** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
c *** Copyright (c) 2007-2010, Niklas Sorensson
c 
c -- no counterexample found with bound 0
c -- no counterexample found with bound 1
c -- no counterexample found with bound 2
c -- no counterexample found with bound 3
c -- no counterexample found with bound 4
c -- no counterexample found with bound 5
c -- no counterexample found with bound 6
c -- no counterexample found with bound 7
c -- specification  G ((((state.token[1] = v4 & state.token[2] = v11) & state.token[3] = v20) & state.token[4] = v22) ->  G !((((((state.token[1] = v5 | state.token[1] = v8) | state.token[1] = v11) | state.token[1] = v24) & (((state.token[2] = v5 | state.token[2] = v8) | state.token[2] = v11) | state.token[2] = v24)) & (((state.token[3] = v5 | state.token[3] = v8) | state.token[3] = v11) | state.token[3] = v24)) & (((state.token[4] = v5 | state.token[4] = v8) | state.token[4] = v11) | state.token[4] = v24)))    is false
c -- as demonstrated by the following execution sequence
c Trace Description: BMC Counterexample 
c Trace Type: Counterexample 
c   -> State: 1.1 <-
c     state.token[1] = 0ud30_276840576
c     state.token[2] = 0ud30_536879424
c     state.token[3] = 0ud30_134485025
c     state.token[4] = 0ud30_117508608
c     state.tid = 1
c     state.vid = 6
c     state.target = 0ud30_0
c     v25 = 0ud30_169873408
c     v24 = 0ud30_42991617
c     v23 = 0ud30_637534228
c     v22 = 0ud30_117508608
c     v21 = 0ud30_101195776
c     v20 = 0ud30_134485025
c     v19 = 0ud30_144704516
c     v18 = 0ud30_22283280
c     v17 = 0ud30_84476992
c     v16 = 0ud30_16802816
c     v15 = 0ud30_671121664
c     v14 = 0ud30_12847360
c     v13 = 0ud30_543686656
c     v12 = 0ud30_22102272
c     v11 = 0ud30_536879424
c     v10 = 0ud30_299656
c     v9 = 0ud30_9076744
c     v8 = 0ud30_4603960
c     v7 = 0ud30_2294344
c     v6 = 0ud30_1056778
c     v5 = 0ud30_268996608
c     v4 = 0ud30_276840576
c     v3 = 0ud30_805437456
c     v2 = 0ud30_268503074
c     v1 = 0ud30_270540800
c     v0 = 0ud30_0
c   -> State: 1.2 <-
c     state.tid = 2
c     state.vid = 3
c     state.target = 0ud30_1056778
c   -> State: 1.3 <-
c     state.token[2] = 0ud30_1056778
c     state.tid = 1
c     state.vid = 19
c     state.target = 0ud30_805437456
c   -> State: 1.4 <-
c     state.token[1] = 0ud30_805437456
c     state.tid = 3
c     state.vid = 5
c     state.target = 0ud30_144704516
c   -> State: 1.5 <-
c     state.token[3] = 0ud30_144704516
c     state.tid = 1
c     state.vid = 11
c     state.target = 0ud30_268996608
c   -> State: 1.6 <-
c     state.token[1] = 0ud30_268996608
c     state.tid = 2
c     state.vid = 8
c     state.target = 0ud30_536879424
c   -> State: 1.7 <-
c     state.token[2] = 0ud30_536879424
c     state.tid = 3
c     state.vid = 24
c     state.target = 0ud30_4603960
c   -> State: 1.8 <-
c     state.token[3] = 0ud30_4603960
c     state.tid = 4
c     state.vid = 1
c     state.target = 0ud30_42991617
c   -> State: 1.9 <-
c     state.token[4] = 0ud30_42991617
c     state.tid = 1
c     state.target = 0ud30_270540800
s 4 13 20 22
t 5 8 11 24
a YES
a 4 13 20 22
a 4 11 20 22
a 4 6 20 22
a 3 6 20 22
a 3 6 19 22
a 5 6 19 22
a 5 11 19 22
a 5 8 11 22
a 5 8 11 24
